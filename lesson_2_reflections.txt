REFLECTIONS

Reflect: Initializing a Repository
What happens when you initialize a repository? Why do you need to do it?
When a repository is initialized Git creates a .git directory in the root directory of the project. The .git directory is the repository (local batabase) of the project which contains metadata and object database for the project. It needs to  create the repository to manage the project files. 

Git Three files States:
Git has three main states that the project files can reside in: Commited, Modified, Staged. Committed means that the data is safely stored in the local database (repository). Modified means that you have changed the file, but have not committed it to the local database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot. 

Git Workflow:
1. You modify files in your working directory.
2. You stage the files, adding snapshots of them to your staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it's considered committed. If it's modified, but has been added to the staging area, it is staged. And if the file was changed since it was checked out, but has not been staged, it is modified.

Reflect: Staging Area
How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory contains the project files that Git manages. The working directory is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk to use or modify. The staging area is a file, generally contained in the Git directory, that stores information about what will go into your next commit. 

Reflect: Commit Size
How can you use the staging area to make sure you have one commit per logical change?
After making a logical change on a file I will move it to the staging area and then commit it.

Reflect: When to Use Branches
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are useful when ones need to develop a new program feature, create new program versions from the original, or work on a development of the program. 

Reflect: Visualizing with Diagrams
How do the diagrams help you visualize the branch structure?
Diagrams show graphically the sequence of commits in a branch and the parent of each commit as well as any unreachable commit. 